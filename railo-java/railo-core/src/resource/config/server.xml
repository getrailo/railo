<?xml version="1.0" encoding="iso-8859-1"?>

<!-- 
Path placeholders: 
	{railo-server}: path to the railo server directory typical where the railo.jar is located
	{railo-config}: same as {railo-server} in server context and same as {railo-web} in web context}
	{temp-directory}: path to the temp directory of the current user of the system
	{home-directory}: path to the home directory of the current user of the system
	{web-root-directory}: path to the web root
	{system-directory}: path to thesystem directory
	{web-context-hash}: hash of the web context

-->

<railo-configuration version="2.0">

	<!--
	system:
	
		out (output-stream)
			- default (write out to default output stream)
			- null (write no output)
			- class:<class> (class that implements java.io.PrintWriter)
			- file:<file> (file to write in)
	
		err (err-stream)
			- default (write out to default output stream)
			- null (write no output)
			- class:<class> (class that implements java.io.PrintWriter)
			- file:<file> (file to write in)
	-->
	<system out="null" err="default"/>


<!--	definition of all database used inside your application. 										-->
<!--	above you can find some definition of jdbc drivers (all this drivers are included at railo) 	-->
<!--	for other database drivers see at: 																-->
<!--	 - http://servlet.java.sun.com/products/jdbc/drivers 											-->
<!--	 - http://sourceforge.net 																		-->
<!--	or ask your database distributor 																-->
	<data-sources
		preserve-single-quote="yes">
	</data-sources>

	<!--
		deploy-directory - directory where java classes will be deployed
		custom-tag-directory - directory where the custom tags are
		tld-directory / fld-directory - directory where additional Function and Tag Library Deskriptor are.
		temp-directory - directory for temporary files (upload aso.)
	 -->
	<file-system  
		fld-directory="{railo-config}/library/fld/" 
		temp-directory="{railo-config}/temp/" 
		tld-directory="{railo-config}/library/tld/"
		function-directory="{railo-config}/library/function/"
		tag-directory="{railo-config}/library/tag/">
	</file-system>
	
	
	<!--
		writers you can select with attribute format at tag dump
		name - name of the writer
		class - class that implement interface "railo.runtime.dump.DumpWriter"
		default - is this the default writer for the console or the bowser (browser,console)
	 -->
	<dump-writers>
		<dump-writer name="html" class="railo.runtime.dump.HTMLDumpWriter" default="browser"/>
		<dump-writer name="text" class="railo.runtime.dump.TextDumpWriter" default="console"/>
		
		<dump-writer name="classic" class="railo.runtime.dump.ClassicHTMLDumpWriter"/>
		<dump-writer name="simple" class="railo.runtime.dump.SimpleHTMLDumpWriter"/>
	</dump-writers>
	
	
	<remote-clients directory="{railo-config}remote-client/" log="logs/" log-level="info"/>
	
    <resources>
        <!--
        arguments:
		lock-timeout   - 	define how long a request wait for a log
	 	-->
    	<default-resource-provider 
    		class="railo.commons.io.res.type.file.FileResourceProvider"
    		arguments="lock-timeout:1000;"/>
    		
    	<!--
    	arguments:
		socket-timeout - 	With this option set to a non-zero timeout, 
							a read call on the InputStream associated 
							with this Socket will block for only this amount 
							of time. 
							If the timeout expires, a java.net.SocketTimeoutException is raised, 
							though the Socket is still valid. 
							The option must be enabled prior to entering the blocking operation to have effect. 
							The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.
							(in milliseconds)
		client-timeout - 	how long a conection kep established (in milliseconds)
		lock-timeout   - 	define how long a request wait for a log (in milliseconds)
	 	-->
    	<resource-provider 
    		scheme="ftp"
    		class="railo.commons.io.res.type.ftp.FTPResourceProvider"
    		arguments="lock-timeout:20000;socket-timeout:-1;client-timeout:60000"/>
    		
    	<!--
        arguments:
		lock-timeout	- 	define how long a request wait for a log
		case-sensitive	-	is zip handled case-sensitive or not
		asynchronus - 		yes or no; define if a buffer is used to synchronize data to zip file.
							no make resource very slow
	 	-->
    	<resource-provider 
    		scheme="zip"
    		class="railo.commons.io.res.type.zip.ZipResourceProvider"
    		arguments="lock-timeout:1000;case-sensitive:true;"/>	
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a log
		case-sensitive	-	is zip handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="tar"
    		class="railo.commons.io.res.type.tar.TarResourceProvider"
    		arguments="lock-timeout:1000;case-sensitive:true;"/>
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a log
		case-sensitive	-	is zip handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="tgz"
    		class="railo.commons.io.res.type.tgz.TGZResourceProvider"
    		arguments="lock-timeout:1000;case-sensitive:true;"/>
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a log
		case-sensitive	-	is http handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="http"
    		class="railo.commons.io.res.type.http.HTTPResourceProvider"
    		arguments="lock-timeout:10000;case-sensitive:false;"/>
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a log
		case-sensitive	-	is http handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="https"
    		class="railo.commons.io.res.type.http.HTTPSResourceProvider"
    		arguments="lock-timeout:10000;case-sensitive:false;"/>
    	<!--
        arguments:
		lock-timeout   - 	define how long a request wait for a log
		case-sensitive	-	is http handled case-sensitive or not
	 	-->
    	<resource-provider 
    		scheme="s3"
    		class="railo.commons.io.res.type.s3.S3ResourceProvider"
    		arguments="lock-timeout:10000;"/>
    </resources>
	

	<!--
	scope configuration:
	
		cascading (expanding of undefined scope)
			- strict (argument,variables)
			- small (argument,variables,cgi,url,form)
			- standard (argument,variables,cgi,url,form,cookie)
			
		cascade-to-resultset: yes|no
			when yes also allow inside "output type query" and "loop type query" call implizid call of resultset
			
		merge-url-form:yes|no
			when yes all form and url scope are synonym for both data
		
		client-directory-max-size
			maximum size in bytes of the client scope directory (used for default type file)
		
		client-max-age
			the max age of the client scope in days
	-->
	<scope 
		cascading="standard"
		cascade-to-resultset="yes"
		merge-url-form="no"
		
		sessiontimeout="0,0,30,0"
		applicationtimeout="1,0,0,0"
		
		requesttimeout="0,0,0,50"
		requesttimeout-log="{railo-config}/logs/requesttimeout.log"
		
		sessionmanagement="yes"		
		clientmanagement="no" 
		setclientcookies="yes" 
		setdomaincookies="no"
		
		client-directory-max-size="10mb"
		client-max-age="90"
		
		/>
		
	<mail spool-interval="5" log="{railo-config}/logs/mail.log" spool-enable="yes" timeout="30">
	</mail>
	
	<mappings>
	<!--
	directory mapping:
		
		trusted: yes|no
			trusted cache -> recheck every time if there are changes in the called cfml file or not.
		virtual:
			virtual path of the application
			example: /somedir/
			
		physical: 
			physical path to the apllication
			example: d:/projects/app1/webroot/somedir/
			
		archive:
			path to a archive file:
			example: d:/projects/app1/rasfiles/somedir.ras
		primary: archive|physical
			define where railo first look for a called cfml file.
			for example when you define physical you can partiquel overwrite the archive.
 -->	
		<mapping
			readonly="yes"
			trusted="true"
			virtual="/railo-context/"
			physical="{railo-config}/context/"
			archive="{railo-config}/context/railo-context.ra"
			primary="physical"/>

	</mappings>	
	
	<custom-tag>
		<mapping
			trusted="yes"
			physical="{railo-config}/customtags/"/>
	</custom-tag>
	
	<ext-tags>
		<ext-tag type="java" name="HelloWorld" class="railo.cfx.example.HelloWorld"/>
	</ext-tags>
	
	<!--
	component:
		
		base: 
			path to base component for every component that have no base component defined 
		data-member-default-access: remote|public|package|private
			access type of component data member (variables in this scope)
	-->
	<component 
        base="/railo-context/Component.cfc"
		data-member-default-access="public"
		dump-template="/railo-context/component-dump.cfm">
  		<mapping physical="{railo-web}/components/" primary="physical" trusted="true"/>
	</component>
	
	<!--
	regional configuration:
		
		locale: default: system locale
			define the locale 
		timezone: default:maschine configuration
			the ID for a TimeZone, either an abbreviation such as "PST", 
			a full name such as "America/Los_Angeles", or a custom ID such as "GMT-8:00". 
		timeserver: [example: swisstime.ethz.ch] default:local time
			dns of a ntp time server
	-->
	<regional
		timeserver="pool.ntp.org"/>
	
	<!--
	orm configuration:
		
		engine-class: class that implements interface railo.runtime.orm.ORMEngine
		
		
		timezone: default:maschine configuration
			the ID for a TimeZone, either an abbreviation such as "PST", 
			a full name such as "America/Los_Angeles", or a custom ID such as "GMT-8:00". 
		timeserver: [example: swisstime.ethz.ch] default:local time
			dns of a ntp time server
	-->
	<orm
		engine-class="railo.runtime.orm.hibernate.HibernateORMEngine"/>
	
	<!--
		enable and disable debugging
	 -->
	<debugging
		log-memory-usage="no"
		memory-log="{railo-config}/logs/memory.log"
		template="/railo-context/templates/debugging/debugging.cfm"
		debug="no"
		show-query-usage="no"/>
	
		<!--
	application:
		
		listener-type: none|classic|modern|mixed (default: mixed)
			none:		no application listener handling
			classic:	search only for Application.cfm
			modern:		search only for Application.cfc
			mixed:		search for Application.cfc and Application.cfm
			
		listener-mode: root|curr|curr2root (default:curr2root)
			define where the Application.cfc/Application.cfm will be searched
			root:			search only in webroot
			current:		search only in current directory
			curr2root:	search the App... from current directory up to root. 
	-->
	<application
		listener-type="mixed"
		listener-mode="curr2root"/>
	
	<update 
		location="http://www.getrailo.org" 
		type="manual"/>
	<!--
	flex:
		
		configuration: xml|manual (default: xml)
			xml:		deploy default configuration for the MessageBrokerServlet as xml to th WEB-INF directory
			manual:		the configuration is up to the user, railo does nothing
			
		caster-class: shortcut (modern,classic) or AMFCaster class.
		- classic (default): Build in AMFCaster follows the implementation of other engines.
		- modern: Build in AMFCaster based on classic AMFCaster improved in functionality.  
		- <class-name>: full class path of class implemeting interface AMFCaster (http://www.getrailo.org/javadoc/railo/runtime/net/amf/AMFCaster.html)
		caster-class-arguments: init arguments provided to the AMFCaster init method, use "CSS" syntax.
	-->
	<flex 
		configuration="xml"/>

</railo-configuration>