 aktualisieren Compatibility Mit diesem Wert werden alle Settings so gesetzt, dass sie möglichst dem CFML2009 Standard entsprechen und mit Implementationen anderer Hersteller kombatibel sind. Strict Mit diesem Wert werden alle Settings so gesetzt, dass Railo so streng wie möglich mit der Umsetzung des Code ist. Speed Mit diesem Wert werden alle Settings so gesetzt, dass sie eine möglichst schnelle Ausführung des Code erlauben. aktualisieren abbrechen Component Zugriffsbeschränkung für Daten Mitglieder einer CFC Definiert wie die Variablen des 'this' Scopes (Data Members) ausserhalb einer CFC angesprochen werden können. Eine strenge Objektorientierung würde verlangen, dass ein solcher Zugriff von Aussen gar nicht erst möglich wäre (access=private). Implizite Notation Wenn eine Eigenschaft einer Komponente fehlt (oder geschützt ist), prüft Railo weiter ob ein passender "getter" oder "setter" verfügbar ist.
    Beispiel: "myComponent.properyName", wenn die Komponente 'myComponent' keine zugreifbare Eigenschaft mit dem Namen 'propertyName' hat,
    sucht Railo nach einer entsprechenden CFC-Funktion (Methode) mit dem Namen "getPropertyName". Für Schreiboperationen auf eine solche Eigenschaft wird nach einer Methode "setPropertyName" in der Komponente gesucht. Allow Variable Scope Definiert, ob eine Komponente einen eigenständigen "Variables" Scope parallel zum "this" Scope hat (CFML Standard) oder nicht. Wenn nicht, dann werden alle nicht spezifizierten Variablen in den "this" scope geschrieben. Charset Template Charset Charset das verwendet wird um die verschiedenen Templates (.cfm und .cfc Files) einzulesen Web Charset Charset das als standardmässiger charset des Output Streams, zum Einlesen von form, url und cgi Scope und zum Schreiben und Lesen des Headers verwendet wird Ressourcen Charset Charset das verwendet wird um die diversen Ressourcen (Files, Zip, Ftp usw.) einzulesen oder zu beschreiben Scope Cascading Abhängig von dieser Einstellung durchsucht Railo gewisse Scopes, um eine im CFML-Code aufgerufene Variable zu finden. Dieses passiert jedoch nur, wenn die Variable ohne vorangestellten Scope aufgerufen wird. (Beispiel: #myVar# anstelle von #variables.myVar#)- strict: durchsucht nur den Variables Scope- small:	durchsucht die Scopes: Variables, Cgi, Url und Form- standard (CFML Standard):	durchsucht die Scopes: Variables, Cgi, Url, Form und Cookie Resultsets durchsuchen Wenn eine Variable keinen vorangestellten Scope hat (Beispiel: #myVar# anstelle von #variables.myVar#), kann Railo (nach dem CFML Standard) auch verfügbare Query-Resultsets durchsuchen. Url und Form kombinieren Mit dieser Einstellung kann festgelegt werden, ob Railo den Url und Form Scope zu einem einzigen Scope zusammenfasst oder nicht. Wenn eine Name (Key) sowohl im Form wie URL Scope vorhanden ist, wird der Wert aus dem Form Scope verwendet. Local Scope Modus Definiert wie der Lokal Scope innerhalb einer UDF von einer Variable ohne Scope angesprochen wird.
- always: der Lokal Scope wird immer verwendet
- update (CFML Standard): der Lokal Scope wird nur verwendet, wenn der entsprechende Key darin bereits existiert. Datasource Einstellungen Single Quotes erhalten Erhält die einfachen Anführungszeichen (') in den SQL-Statements, die im Tag CFQuery definiert werden. Custom Tag Einstellungen Untergeordnete Verzeichnisse einbeziehen Untergeordnete Verzeichnisse nach Customtags durchsuchen (für Archive nicht unterstützt) Lokales Verzeichnis einbeziehen Lokales Verzeichnisse aus welchen der Customtag aufgerufen wird, nach dem Customtag durchsuchen Extensions Dies sind die Extensions welche für Customtags verwendet werden und die Rheinefolge in welcher sie gesucht werden.
